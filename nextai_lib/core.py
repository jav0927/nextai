# AUTOGENERATED! DO NOT EDIT! File to edit: 01_anchor_boxes.ipynb (unless otherwise specified).

__all__ = ['anc_grids', 'anc_zooms', 'anc_ratios', 'anchor_scales', 'k', 'anc_offsets', 'anc_x', 'anc_y', 'anc_ctrs',
           'anc_sizes', 'grid_sizes', 'anchors', 'show_anchors']

# Cell
from fastai.torch_core import *

# Cell
#### Anchor Boxes
# This methods creates anchor boxes based on a grid with coordinates  (-1,-1), (1,1), top-left, bottom-right.

anc_grids = [4, 2, 1]                           # Anchor grid side elements ( 4x4, 2x2, 1x1)
anc_zooms = [0.75, 1., 1.3]                     # Anchor zooming coefficients
anc_ratios = [(1., 1.), (1., 0.5), (0.5, 1.)]   # Anchor aspect rations

anchor_scales = [(anz*i,anz*j) for anz in anc_zooms for (i,j) in anc_ratios]

# *** Number of default boxes (9) associated to a given image ***
k = len(anchor_scales)     # To be used in the SSD model
# **********************************************

# Compute the offsets-to-the-center for each of the grid sizes
anc_offsets = [2/(o*2) for o in anc_grids]

# Compute x-ccordinates for center points
anc_x = np.concatenate([np.repeat(np.linspace(ao-1, 1-ao, ag), ag)
                        for ao, ag in zip(anc_offsets,anc_grids)])

# Compute  y_coordinates for center points
anc_y = np.concatenate([np.tile(np.linspace(ao-1, 1-ao, ag), ag)
                        for ao, ag in zip(anc_offsets,anc_grids)])

# Compile list of center coordinates
anc_ctrs = np.repeat(np.stack([anc_x,anc_y], axis=1), k, axis=0)

# List of height (h) and width (w) for each anchor box
anc_sizes = np.concatenate([np.array([[2*o/ag,2*p/ag]
              for i in range(ag*ag) for o,p in anchor_scales])
                 for ag in anc_grids])

# List of height (h) and width (w) for each grid cell
grid_sizes = tensor(np.concatenate([np.array([ 1/ag
              for i in range(ag*ag) for o,p in anchor_scales])
                  for ag in anc_grids])).unsqueeze(1) * 2

# List of anchors in format 'center xy, height, width'
anchors = tensor(np.concatenate([anc_ctrs, anc_sizes], axis=1)).float()

# List of anchor box corner coordinates. Top-left & bottom-right
# TODO: resolve anchor_corners
#anchor_cnr = cthw2corners(anchors)

# Cell
# Display generated anchor grid
def show_anchors(ancs, size, y_first=True):
    _,ax = plt.subplots(1,1, figsize=(7,7))
    ax.set_xticks(np.linspace(-1,1, size[1]+1))
    ax.set_yticks(np.linspace(-1,1, size[0]+1))
    ax.grid(True, which='both')
    ax.scatter(ancs[:,1], ancs[:,0] if y_first else ancs[:,0], ancs[:,1])
    ax.set_yticklabels([])
    ax.set_xticklabels([])
    ax.set_xlim(-1,1)
    ax.set_ylim(1,-1) #-1 is top, 1 is bottom
    for i, (x, y) in enumerate(zip(ancs[:, 1], ancs[:, 0])): ax.annotate(i, xy = (x,y))
